<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap");
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
      }
      *::before,
      *::after {
        padding: 0;
        margin: 0;
      }
      :root {
        --green: #60f546;
        --blue: #4385ff;
        --lightblack: #515f6f;
        --white: #ffffff;
        --darkwhite: #e0c2ff;
        --greenshadow: #b2f9f2;
        --lightbshadow: rgba(0, 0, 0, 0.15);
      }
      body {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background: linear-gradient(var(--green) 0%, var(--blue) 100%);
      }
      .container {
        width: 480px;
        padding: 25px 30px;
        overflow: hidden;
        position: relative;
        border-radius: 15px;
        background: var(--white);
        box-shadow: 0px 6px 15px var(--lightbshadow);
      }
      .container i {
        cursor: pointer;
      }
      .top-bar,
      .progress-area .song-timer,
      .controls,
      .music-list .header,
      .music-list ul li {
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
      .top-bar i {
        font-size: 30px;
        color: var(--lightblack);
      }
      .top-bar i:first-child {
        margin-left: -7px;
      }
      .top-bar span {
        font-size: 18px;
        margin-left: -3px;
        color: var(--lightblack);
      }
      .img-area {
        width: 100%;
        height: 256px;
        overflow: hidden;
        margin-top: 25px;
        border-radius: 15px;
        box-shadow: 0px 6px 12px var(--lightbshadow);
      }
      .img-area img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      .song-details {
        text-align: center;
        margin: 30px 0;
      }
      .song-details p {
        color: var(--lightblack);
      }
      .song-details .name {
        font-size: 21px;
      }
      .song-details .artist {
        font-size: 18px;
        opacity: 0.9;
        line-height: 35px;
      }
      .progress-area {
        height: 6px;
        width: 100%;
        border-radius: 50px;
        background: #f0f0f0;
        cursor: pointer;
      }
      .progress-area .progress-bar {
        height: inherit;
        width: 0%;
        position: relative;
        border-radius: inherit;
        background: linear-gradient(90deg, var(--green) 0%, var(--blue) 100%);
      }
      .progress-bar::before {
        content: "";
        position: absolute;
        height: 12px;
        width: 12px;
        border-radius: 50%;
        top: 50%;
        right: -5px;
        z-index: 2;
        opacity: 0;
        pointer-events: none;
        transform: translateY(-50%);
        background: inherit;
        transition: opacity 0.2s ease;
      }
      .progress-area:hover .progress-bar::before {
        opacity: 1;
        pointer-events: auto;
      }
      .progress-area .song-timer {
        margin-top: 2px;
      }
      .song-timer span {
        font-size: 13px;
        color: var(--lightblack);
      }
      .controls {
        margin: 40px 0 5px 0;
      }
      .controls i {
        font-size: 28px;
        user-select: none;
        background: linear-gradient(var(--green) 0%, var(--blue) 100%);
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
      }
      .controls i:nth-child(2),
      .controls i:nth-child(4) {
        font-size: 43px;
      }
      .controls #prev {
        margin-right: -13px;
      }
      .controls #next {
        margin-left: -13px;
      }
      .controls .play-pause {
        height: 54px;
        width: 54px;
        display: flex;
        cursor: pointer;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: linear-gradient(var(--white) 0%, var(--darkwhite) 100%);
        box-shadow: 0px 0px 5px var(--green);
      }
      .play-pause::before {
        position: absolute;
        content: "";
        height: 43px;
        width: 43px;
        border-radius: inherit;
        background: linear-gradient(var(--green) 0%, var(--blue) 100%);
      }
      .play-pause i {
        height: 43px;
        width: 43px;
        line-height: 43px;
        text-align: center;
        background: inherit;
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: absolute;
      }

      .music-list {
        position: absolute;
        background: var(--white);
        width: 100%;
        left: 0;
        bottom: -55%;
        opacity: 0;
        pointer-events: none;
        z-index: 5;
        padding: 15px 30px;
        border-radius: 15px;
        box-shadow: 0px -5px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.15s ease-out;
      }
      .music-list.show {
        bottom: 0;
        opacity: 1;
        pointer-events: auto;
      }
      .header .row {
        display: flex;
        align-items: center;
        font-size: 19px;
        color: var(--lightblack);
      }
      .header .row i {
        cursor: default;
      }
      .header .row span {
        margin-left: 5px;
      }
      .header #close {
        font-size: 22px;
        color: var(--lightblack);
      }
      .music-list ul {
        margin: 10px 0;
        max-height: 260px;
        overflow: auto;
      }
      .music-list ul::-webkit-scrollbar {
        width: 0px;
      }
      .music-list ul li {
        list-style: none;
        display: flex;
        cursor: pointer;
        padding-bottom: 10px;
        margin-bottom: 5px;
        color: var(--lightblack);
        border-bottom: 1px solid #e5e5e5;
      }
      .music-list ul li:last-child {
        border-bottom: 0px;
      }
      .music-list ul li .row span {
        font-size: 17px;
      }
      .music-list ul li .row p {
        opacity: 0.9;
      }
      ul li .audio-duration {
        font-size: 16px;
      }
      ul li.playing {
        pointer-events: none;
        color: var(--blue);
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="top-bar">
        <!-- <i class="material-icons"></i> -->
        <span>Music Player</span>
        <!-- <i class="material-icons"></i> -->
      </div>
      <div class="img-area">
        <img src="" alt="" />
      </div>
      <div class="song-details">
        <p class="name"></p>
        <p class="artist"></p>
      </div>
      <div class="progress-area">
        <div class="progress-bar">
          <audio id="main-audio" src=""></audio>
        </div>
        <div class="song-timer">
          <span class="current-time">0:00</span>
          <span class="max-duration">0:00</span>
        </div>
      </div>
      <div class="controls">
        <i id="repeat-plist" class="material-icons" title="Playlist looped">repeat</i>
        <i id="prev" class="material-icons">skip_previous</i>
        <div class="play-pause">
          <i class="material-icons play">play_arrow</i>
        </div>
        <i id="next" class="material-icons">skip_next</i>
        <i id="more-music" class="material-icons">queue_music</i>
      </div>
      <div class="music-list">
        <div class="header">
          <div class="row">
            <i class="list material-icons">queue_music</i>
            <span>Music list</span>
          </div>
          <i id="close" class="material-icons">close</i>
        </div>
        <ul>
          <!-- here li list are coming from js -->
        </ul>
      </div>
    </div>

    <script>
      let allMusic = [
        {
          name: "Unstoppable",
          artist: "Sia",
          img: "aud-01",
          src: "aud-01",
        },
        {
          name: "Don't let me fail",
          artist: "lenka kripac",
          img: "aud-02",
          src: "aud-02",
        },
        {
          name: "Glass Animal",
          artist: "Beauz & Jvna",
          img: "aud-03",
          src: "aud-03",
        },
        {
          name: "Hanuman",
          artist: "Mike Archangelo",
          img: "aud-04",
          src: "aud-04",
        },
        {
          name: "Live like you're dying",
          artist: "Jim Yosef x Roy",
          img: "aud-05",
          src: "aud-05",
        },
        {
          name: "Ram",
          artist: "NCS Release",
          img: "aud-06",
          src: "aud-06",
        },
        {
          name: "Trouble is a friend",
          artist: "lenka kripac",
          img: "aud-07",
          src: "aud-07",
        },
      ];
    </script>
    <script>
      const container = document.querySelector(".container"),
        musicImg = container.querySelector(".img-area img"),
        musicName = container.querySelector(".song-details .name"),
        musicArtist = container.querySelector(".song-details .artist"),
        playPauseBtn = container.querySelector(".play-pause"),
        prevBtn = container.querySelector("#prev"),
        nextBtn = container.querySelector("#next"),
        mainAudio = container.querySelector("#main-audio"),
        progressArea = container.querySelector(".progress-area"),
        progressBar = progressArea.querySelector(".progress-bar"),
        musicList = container.querySelector(".music-list"),
        moreMusicBtn = container.querySelector("#more-music"),
        closemoreMusic = musicList.querySelector("#close");

      let musicIndex = Math.floor(Math.random() * allMusic.length + 1);
      isMusicPaused = true;

      window.addEventListener("load", () => {
        loadMusic(musicIndex);
        playingSong();
      });

      function loadMusic(indexNumb) {
        musicName.innerText = allMusic[indexNumb - 1].name;
        musicArtist.innerText = allMusic[indexNumb - 1].artist;
        musicImg.src = `img/${allMusic[indexNumb - 1].src}.png`;
        mainAudio.src = `aud/${allMusic[indexNumb - 1].src}.mp3`;
      }

      //play music function
      function playMusic() {
        container.classList.add("paused");
        playPauseBtn.querySelector("i").innerText = "pause";
        mainAudio.play();
      }

      //pause music function
      function pauseMusic() {
        container.classList.remove("paused");
        playPauseBtn.querySelector("i").innerText = "play_arrow";
        mainAudio.pause();
      }

      //prev music function
      function prevMusic() {
        musicIndex--;
        musicIndex < 1 ? (musicIndex = allMusic.length) : (musicIndex = musicIndex);
        loadMusic(musicIndex);
        playMusic();
        playingSong();
      }

      //next music function
      function nextMusic() {
        musicIndex++;
        musicIndex > allMusic.length ? (musicIndex = 1) : (musicIndex = musicIndex);
        loadMusic(musicIndex);
        playMusic();
        playingSong();
      }

      // play or pause button event
      playPauseBtn.addEventListener("click", () => {
        const isMusicPlay = container.classList.contains("paused");
        isMusicPlay ? pauseMusic() : playMusic();
        playingSong();
      });

      //prev music button event
      prevBtn.addEventListener("click", () => {
        prevMusic();
      });

      //next music button event
      nextBtn.addEventListener("click", () => {
        nextMusic();
      });

      // update progress bar width according to music current time
      mainAudio.addEventListener("timeupdate", (e) => {
        const currentTime = e.target.currentTime;
        const duration = e.target.duration;
        let progressWidth = (currentTime / duration) * 100;
        progressBar.style.width = `${progressWidth}%`;

        let musicCurrentTime = container.querySelector(".current-time"),
          musicDuartion = container.querySelector(".max-duration");
        mainAudio.addEventListener("loadeddata", () => {
          let mainAdDuration = mainAudio.duration;
          let totalMin = Math.floor(mainAdDuration / 60);
          let totalSec = Math.floor(mainAdDuration % 60);
          if (totalSec < 10) {
            totalSec = `0${totalSec}`;
          }
          musicDuartion.innerText = `${totalMin}:${totalSec}`;
        });

        // update playing song current time
        let currentMin = Math.floor(currentTime / 60);
        let currentSec = Math.floor(currentTime % 60);
        if (currentSec < 10) {
          currentSec = `0${currentSec}`;
        }
        musicCurrentTime.innerText = `${currentMin}:${currentSec}`;
      });

      // update playing song currentTime on according to the progress bar width
      progressArea.addEventListener("click", (e) => {
        let progressWidth = progressArea.clientWidth;
        let clickedOffsetX = e.offsetX;
        let songDuration = mainAudio.duration;
        mainAudio.currentTime = (clickedOffsetX / progressWidth) * songDuration;
        playMusic();
        playingSong();
      });

      const repeatBtn = container.querySelector("#repeat-plist");
      repeatBtn.addEventListener("click", () => {
        let getText = repeatBtn.innerText;
        switch (getText) {
          case "repeat":
            repeatBtn.innerText = "repeat_one";
            repeatBtn.setAttribute("title", "Song looped");
            break;
          case "repeat_one":
            repeatBtn.innerText = "shuffle";
            repeatBtn.setAttribute("title", "Playback shuffled");
            break;
          case "shuffle":
            repeatBtn.innerText = "repeat";
            repeatBtn.setAttribute("title", "Playlist looped");
            break;
        }
      });

      //code for what to do after song ended
      mainAudio.addEventListener("ended", () => {
        let getText = repeatBtn.innerText;
        switch (getText) {
          case "repeat":
            nextMusic();
            break;
          case "repeat_one":
            mainAudio.currentTime = 0;
            loadMusic(musicIndex);
            playMusic();
            break;
          case "shuffle":
            let randIndex = Math.floor(Math.random() * allMusic.length + 1);
            do {
              randIndex = Math.floor(Math.random() * allMusic.length + 1);
            } while (musicIndex == randIndex);
            musicIndex = randIndex;
            loadMusic(musicIndex);
            playMusic();
            playingSong();
            break;
        }
      });

      moreMusicBtn.addEventListener("click", () => {
        musicList.classList.toggle("show");
      });
      closemoreMusic.addEventListener("click", () => {
        moreMusicBtn.click();
      });
      const ulTag = container.querySelector("ul");

      for (let i = 0; i < allMusic.length; i++) {
        let liTag = `<li li-index="${i + 1}">
                <div class="row">
                  <span>${allMusic[i].name}</span>
                  <p>${allMusic[i].artist}</p>
                </div>
                <span id="${allMusic[i].src}" class="audio-duration"></span>
                <audio class="${allMusic[i].src}" src="songs/${allMusic[i].src}.mp3"></audio>
              </li>`;
        ulTag.insertAdjacentHTML("beforeend", liTag);

        let liAudioDuartionTag = ulTag.querySelector(`#${allMusic[i].src}`);
        let liAudioTag = ulTag.querySelector(`.${allMusic[i].src}`);
        liAudioTag.addEventListener("loadeddata", () => {
          let duration = liAudioTag.duration;
          let totalMin = Math.floor(duration / 60);
          let totalSec = Math.floor(duration % 60);
          if (totalSec < 10) {
            totalSec = `0${totalSec}`;
          }
          liAudioDuartionTag.innerText = `${totalMin}:${totalSec}`;
          liAudioDuartionTag.setAttribute("t-duration", `${totalMin}:${totalSec}`);
        });
      }

      function playingSong() {
        const allLiTag = ulTag.querySelectorAll("li");

        for (let j = 0; j < allLiTag.length; j++) {
          let audioTag = allLiTag[j].querySelector(".audio-duration");

          if (allLiTag[j].classList.contains("playing")) {
            allLiTag[j].classList.remove("playing");
            let adDuration = audioTag.getAttribute("t-duration");
            audioTag.innerText = adDuration;
          }

          if (allLiTag[j].getAttribute("li-index") == musicIndex) {
            allLiTag[j].classList.add("playing");
            audioTag.innerText = "Playing";
          }

          allLiTag[j].setAttribute("onclick", "clicked(this)");
        }
      }

      function clicked(element) {
        let getLiIndex = element.getAttribute("li-index");
        musicIndex = getLiIndex;
        loadMusic(musicIndex);
        playMusic();
        playingSong();
      }
    </script>
  </body>
</html>
